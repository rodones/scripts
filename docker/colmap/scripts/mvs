#!/usr/bin/env bash

set -e
set -o pipefail

SCRIPT_DIR="$(
    cd -- "$(dirname "$0")" >/dev/null 2>&1 || exit
    pwd -P
)"

# shellcheck source=common/array.sh
source "$SCRIPT_DIR/common/array.sh"

PROG_NAME=$(basename "$0")
BASE="/working"
IMAGES="$BASE/images"
OUTPUT="$BASE/output"
SPARSE="$OUTPUT/sparse"
DENSE="$OUTPUT/dense"

MODEL_ID="0"
NUM_ITERATIONS="2"
WINDOW_STEP="2"
FILTER="true"
GEOM_CONSISTENCY="false"
STREO_FUSION_INPUT_TYPE="photometric"
MAX_IMAGE_SIZE="1000"
PIPELINE=("image_undistorter" "patch_match_stereo" "stereo_fusion")
PIPELINE_VALUES=("image_undistorter" "patch_match_stereo" "stereo_fusion" "poisson_mesher" "delaunay_mesher")

print_config() {
    cat <<EOF | sed -E '/^$/d'
==============================================================================
MODEL                   : $MODEL_ID
ITERATION               : $NUM_ITERATIONS
STEP                    : $WINDOW_STEP
FILTER                  : $FILTER
CONSISTENCY             : $GEOM_CONSISTENCY
STREO_FUSION_INPUT_TYPE : $STREO_FUSION_INPUT_TYPE
MAX_IMAGE_SIZE          : $MAX_IMAGE_SIZE
PIPELINE:               : ${PIPELINE[*]}
==============================================================================
EOF
}

print_usage() {
    cat <<EOF
$PROG_NAME [-p|-g] [OPTION]...
Rodones COLMAP multi-view stereo script
Options:
 Type:
  -p, --photometric               outputs fast but low quality. (default)
  -g, --geometric                 outputs slow but high quality.
 Others:
  -m, --model=ID                  sparse model id. (default: $MODEL_ID)
  -i, --iterations=N              number of iterations performed by patch_match_stereo step. (default: $NUM_ITERATIONS)
  -s, --step=N                    window step count performed by patch_match_stereo step. (default: $WINDOW_STEP)
  -f, --filter[=B]                enables filtering patch_match_stereo step. (default: $FILTER)
  -M, --max-image-size=N          sets maximum image size for image_undistorter step. (default: $MAX_IMAGE_SIZE)
  -e, --exec=STEP...              executes only given steps.
  -S, --summary                   creates a log file under output/logs
                                  values: ${PIPELINE_VALUES[*]}
EOF
}

if ! OPTIONS=$(getopt -n "$PROG_NAME" \
    -o hm:i:s:f::gpM:x:S \
    -l help,model:,iteration:,step:,filter::,geometric,photometric,max-image-size:,exec:,summary \
    -- "$@"); then
    exit
fi

summary() {
    if [ ! -d $OUTPUT/logs ]; then
        mkdir $OUTPUT/logs
    fi
    python3 ..$SCRIPT_DIR/mvs-summary-logger.py
}

eval set -- "$OPTIONS"

while [ $# -gt 0 ]; do
    case $1 in
    -h | --help)
        print_usage
        exit
        ;;
    -S | --summary)
        summary
        exit
        ;;
    -m | --model)
        MODEL_ID="$2"
        [ ! -d "$SPARSE/$MODEL_ID" ] && echo "error: model does not exist." && exit 1
        shift 2
        ;;
    -i | --iteration)
        NUM_ITERATIONS="$2"
        shift 2
        ;;
    -s | --step)
        WINDOW_STEP="$2"
        shift 2
        ;;
    -f | --filter)
        FILTER="${2:-true}"
        shift 2
        ;;
    -g | --geometric)
        GEOM_CONSISTENCY="true"
        STREO_FUSION_INPUT_TYPE="geometric"
        shift
        ;;
    -p | --photometric)
        GEOM_CONSISTENCY="false"
        STREO_FUSION_INPUT_TYPE="photometric"
        shift
        ;;
    -M | --max-image-size)
        MAX_IMAGE_SIZE="$2"
        shift 2
        ;;
    -x | --exec)
        set -f
        IFS="," read -r -a PIPELINE <<<"$2"

        array_typeof PIPELINE PIPELINE_VALUES
        index="$(("$?" - 1))"

        if [ "$index" -ge 0 ]; then
            echo "error: '${PIPELINE[$index]}' is not valid step. the possible values are ${PIPELINE_VALUES[*]}."
            exit 3
        fi
        shift
        ;;
    --)
        shift
        break
        ;;
    *)
        shift
        ;;
    esac
done

print_config

FUSION_OUTPUT="$DENSE/fused-${MODEL_ID}-${STREO_FUSION_INPUT_TYPE}-${NUM_ITERATIONS}i-${WINDOW_STEP}s.ply"
POISSON_OUTPUT="$DENSE/meshed-poisson-${MODEL_ID}-${STREO_FUSION_INPUT_TYPE}-${NUM_ITERATIONS}i-${WINDOW_STEP}s.ply"
DELAUNAY_OUTPUT="$DENSE/meshed-delaunay-${MODEL_ID}-${STREO_FUSION_INPUT_TYPE}-${NUM_ITERATIONS}i-${WINDOW_STEP}s.ply"

[ -d "$OUTPUT" ] || mkdir "$OUTPUT"
[ -d "$DENSE" ] || mkdir "$DENSE"

if array_contains PIPELINE "image_undistorter"; then
    colmap image_undistorter \
        --image_path "$IMAGES" \
        --input_path "$SPARSE/$MODEL_ID" \
        --output_path "$DENSE" \
        --output_type COLMAP \
        --max_image_size "$MAX_IMAGE_SIZE"
fi

if array_contains PIPELINE "patch_match_stereo"; then
    colmap patch_match_stereo \
        --workspace_path "$DENSE" \
        --workspace_format COLMAP \
        --PatchMatchStereo.geom_consistency "$GEOM_CONSISTENCY" \
        --PatchMatchStereo.filter "$FILTER" \
        --PatchMatchStereo.window_step "$WINDOW_STEP" \
        --PatchMatchStereo.num_iterations "$NUM_ITERATIONS"
fi

if array_contains PIPELINE "stereo_fusion"; then
    colmap stereo_fusion \
        --workspace_path "$DENSE" \
        --workspace_format COLMAP \
        --input_type "$STREO_FUSION_INPUT_TYPE" \
        --output_path "$FUSION_OUTPUT"
fi

if array_contains PIPELINE "poisson_mesher"; then
    colmap poisson_mesher \
        --input_path "$FUSION_OUTPUT" \
        --output_path "$POISSON_OUTPUT"
fi

if array_contains PIPELINE "delaunay_mesher"; then
    colmap delaunay_mesher \
        --input_path "$DENSE" \
        --input_type dense \
        --output_path "$DELAUNAY_OUTPUT"
fi
