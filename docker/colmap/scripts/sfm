#!/usr/bin/env bash

SCRIPT_DIR="$(
    cd -- "$(dirname "$0")" >/dev/null 2>&1 || exit
    pwd -P
)"

# shellcheck source=common/array.sh
source "$SCRIPT_DIR/common/array.sh"

PROG_NAME=$(basename "$0")

BASE="/working"
IMAGES="$BASE/images"
OUTPUT="$BASE/output"
DATABASE="$OUTPUT/database.db"
SPARSE="$OUTPUT/sparse"
VOCAB_TREES="/vocab-trees"

USE_GPU="$([ -f /NGC-DL-CONTAINER-LICENSE ] && echo 1 || echo 0)"
MATCHER="exhaustive"
MATCHER_COND_ARGS=()
FEATURE_EXTRACTOR_COND_ARGS=()
MAPPER_COND_ARGS=()
NUM_THREAD="4"
VOCAB_TREE_PATH=""
PIPELINE=("feature_extractor" "matcher" "mapper")
PIPELINE_VALUES=("feature_extractor" "matcher" "mapper")

usage() {
    cat <<EOF
$PROG_NAME [[-c|-g] -t N] [-e|-s|-v VT] [-x STEP [STEP]...]
Rodones COLMAP structure-from-motion script
Options:
  Hardware:
    -c, --cpu                     use cpu instead of gpu. $([ "$USE_GPU" = "0" ] && echo "(default)")
    -g, --gpu                     use gpu with cuda toolkit. $([ "$USE_GPU" = "1" ] && echo "(default)")
    -t, --thread=N                use N threads if possible.
  Matchers:
    -e, --exhaustive              use exhaustive matcher (default).
    -s, --sequential              use sequential matcher.
    -v, --vocab-tree=VT           use vocabulary tree matcher.

  -x, --exec=STEP...              only execute given steps.
                                  values: ${PIPELINE_VALUES[*]}
  -I, --images-list=FILE          new images list to register
EOF
}

print_config() {
    cat <<EOF | sed -E '/^$/d'
==============================================================================
GPU         : $USE_GPU
PIPELINE    : ${PIPELINE[*]}
MATCHER     : $MATCHER
THREAD      : $NUM_THREAD
$([ "$MATCHER" = "vocab_tree" ] && echo "VOCAB_TREE  : $VOCAB_TREE_PATH")
==============================================================================
EOF
}

if ! OPTIONS=$(getopt -n "$PROG_NAME" \
    -o hcgt:sev:x:I: \
    -l help,cpu,gpu,thread:,sequential,exhaustive,vocab-tree:,exec:,images-list \
    -- "$@"); then
    exit
fi

eval set -- "$OPTIONS"

while [ $# -gt 0 ]; do
    case $1 in
    -h | --help)
        usage
        exit
        ;;
    -c | --cpu)
        USE_GPU=0
        ;;
    -g | --gpu)
        USE_GPU=1
        ;;
    -s | --sequential)
        MATCHER="sequential"
        ;;
    -e | --exhaustive)
        MATCHER="exhaustive"
        ;;
    -v | --vocab-tree)
        MATCHER="vocab_tree"
        VOCAB_TREE_PATH="$VOCAB_TREES/$2.bin"

        [ ! -f "$VOCAB_TREE_PATH" ] && echo "error: given vocab tree '$VOCAB_TREE_PATH' does not exist." && exit 2

        MATCHER_COND_ARGS+=("--VocabTreeMatching.vocab_tree_path" "$VOCAB_TREE_PATH")
        shift
        ;;
    -t | --thread)
        NUM_THREAD="$2"
        shift
        ;;
    -x | --exec)
        set -f
        IFS="," read -r -a PIPELINE <<<"$2"

        array_typeof PIPELINE PIPELINE_VALUES
        index="$(("$?" - 1))"

        if [ "$index" -ge 0 ]; then
            echo "error: '${PIPELINE[$index]}' is not valid step. the possible values are ${PIPELINE_VALUES[*]}."
            exit 3
        fi
        shift
        ;;
    -I | --images-list)
        FEATURE_EXTRACTOR_COND_ARGS+=("--image_list_path" "$2")
        MATCHER_COND_ARGS+=("--VocabTreeMatching.match_list_path" "$2")
        ;;
    *) ;;
    esac
    shift
done

print_config

[ ! -d "$BASE" ] && echo "error: $BASE does not exist." && exit 1

[ -d "$OUTPUT" ] || mkdir "$OUTPUT"

if array_contains PIPELINE "feature_extractor"; then
    colmap feature_extractor \
        --SiftExtraction.use_gpu="$USE_GPU" \
        --SiftExtraction.num_thread="$NUM_THREAD" \
        --database_path "$DATABASE" \
        --image_path "$IMAGES" \
        "${FEATURE_EXTRACTOR_COND_ARGS[@]}"
fi

if array_contains PIPELINE "matcher"; then
    colmap "$MATCHER"_matcher \
        --SiftMatching.use_gpu="$USE_GPU" \
        --SiftMatching.num_thread="$NUM_THREAD" \
        --database_path "$DATABASE" \
        "${MATCHER_COND_ARGS[@]}"
fi

if array_contains PIPELINE "mapper"; then
    [ -d "$SPARSE" ] || mkdir "$SPARSE"

    colmap mapper \
        --database_path "$DATABASE" \
        --image_path "$IMAGES" \
        --output_path "$SPARSE" \
        "${MAPPER_COND_ARGS[@]}"
fi
