#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from sys import path
from os import listdir, write
from os.path import join
from argparse import ArgumentParser
from itertools import chain

path.append("/colmap/scripts/python/")
from read_write_model import read_images_binary

sparse = "/working/output/sparse"
folders = sorted(map(int, listdir(sparse)))


def get_args():
    parser = ArgumentParser()

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--used", "--registered", "-r",
                       action="store_true", help="list used images")
    group.add_argument("--unused", "--unregistered", "-u",
                       action="store_true", help="list unused images")
    group.add_argument("--diff", "-d", action="store_true",
                       help="show common images and other images used in models without common ones")

    parser.add_argument("models", metavar="N", type=int, nargs="*",
                        default=folders, help="model ids to be read")

    return parser.parse_args()


def get_used_images(models, diff=False):
    return set(chain.from_iterable(models.values()))


def get_unused_images(models, diff=False):
    all_images = set(listdir("/working/images"))

    return all_images.difference(get_used_images(models))

def print_sorted_list(arr, start="", end="\n"):
    for el in sorted(arr):
        print(start + el, end=end)


def intersect_all(*s):
    return set(s[0]).intersection(*s)


def print_header(title):
    print("┌─────────────────────────────────────────────┐")
    print("│" +         str(title).center(45) +         "│")
    print("└─────────────────────────────────────────────┘")



def main():
    args = get_args()

    models = dict([
        (model_id, set([image.name for image in read_images_binary(join(sparse, str(model_id), "images.bin")).values()]))
        for model_id in args.models
    ])

    if args.used:
        print_sorted_list(get_used_images(models))
    elif args.unused:
        print_sorted_list(get_unused_images(models))
    elif args.diff:
        common = intersect_all(*models.values())

        print_header("COMMON ({} images)".format(len(common)))
        print_sorted_list(common, start=" ")

        for model_id, model_images in models.items():
            model_images.difference_update(common)

            print_header("{} ({} images)".format(model_id, len(model_images)))
            print_sorted_list(model_images, start=" ")


if __name__ == "__main__":
    main()